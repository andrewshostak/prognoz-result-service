// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/andrewshostak/result-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// AliasRepository is an autogenerated mock type for the AliasRepository type
type AliasRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, alias
func (_m *AliasRepository) Find(ctx context.Context, alias string) (*repository.Alias, error) {
	ret := _m.Called(ctx, alias)

	var r0 *repository.Alias
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*repository.Alias, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *repository.Alias); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Alias)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAliasRepository creates a new instance of AliasRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAliasRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AliasRepository {
	mock := &AliasRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

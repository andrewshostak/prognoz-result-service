// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/andrewshostak/result-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// MatchRepository is an autogenerated mock type for the MatchRepository type
type MatchRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, match
func (_m *MatchRepository) Create(ctx context.Context, match repository.Match) (*repository.Match, error) {
	ret := _m.Called(ctx, match)

	var r0 *repository.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Match) (*repository.Match, error)); ok {
		return rf(ctx, match)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Match) *repository.Match); ok {
		r0 = rf(ctx, match)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Match) error); ok {
		r1 = rf(ctx, match)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MatchRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, resultStatus
func (_m *MatchRepository) List(ctx context.Context, resultStatus repository.ResultStatus) ([]repository.Match, error) {
	ret := _m.Called(ctx, resultStatus)

	var r0 []repository.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ResultStatus) ([]repository.Match, error)); ok {
		return rf(ctx, resultStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ResultStatus) []repository.Match); ok {
		r0 = rf(ctx, resultStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ResultStatus) error); ok {
		r1 = rf(ctx, resultStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// One provides a mock function with given fields: ctx, search
func (_m *MatchRepository) One(ctx context.Context, search repository.Match) (*repository.Match, error) {
	ret := _m.Called(ctx, search)

	var r0 *repository.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Match) (*repository.Match, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Match) *repository.Match); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Match) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, resultStatus
func (_m *MatchRepository) Update(ctx context.Context, id uint, resultStatus repository.ResultStatus) (*repository.Match, error) {
	ret := _m.Called(ctx, id, resultStatus)

	var r0 *repository.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, repository.ResultStatus) (*repository.Match, error)); ok {
		return rf(ctx, id, resultStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, repository.ResultStatus) *repository.Match); ok {
		r0 = rf(ctx, id, resultStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, repository.ResultStatus) error); ok {
		r1 = rf(ctx, id, resultStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMatchRepository creates a new instance of MatchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatchRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MatchRepository {
	mock := &MatchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

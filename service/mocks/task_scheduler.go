// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TaskScheduler is an autogenerated mock type for the TaskScheduler type
type TaskScheduler struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: key
func (_m *TaskScheduler) Cancel(key string) {
	_m.Called(key)
}

// Schedule provides a mock function with given fields: key, task, period, startTime
func (_m *TaskScheduler) Schedule(key string, task func(context.Context), period time.Duration, startTime time.Time) error {
	ret := _m.Called(key, task, period, startTime)

	if len(ret) == 0 {
		panic("no return value specified for Schedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context), time.Duration, time.Time) error); ok {
		r0 = rf(key, task, period, startTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskScheduler creates a new instance of TaskScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskScheduler {
	mock := &TaskScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

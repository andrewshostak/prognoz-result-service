// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/andrewshostak/result-service/client"

	mock "github.com/stretchr/testify/mock"
)

// FootballAPIClient is an autogenerated mock type for the FootballAPIClient type
type FootballAPIClient struct {
	mock.Mock
}

// SearchFixtures provides a mock function with given fields: ctx, search
func (_m *FootballAPIClient) SearchFixtures(ctx context.Context, search client.FixtureSearch) (*client.FixturesResponse, error) {
	ret := _m.Called(ctx, search)

	var r0 *client.FixturesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.FixtureSearch) (*client.FixturesResponse, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.FixtureSearch) *client.FixturesResponse); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FixturesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.FixtureSearch) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFootballAPIClient creates a new instance of FootballAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFootballAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FootballAPIClient {
	mock := &FootballAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

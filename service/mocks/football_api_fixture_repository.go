// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/andrewshostak/result-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// FootballAPIFixtureRepository is an autogenerated mock type for the FootballAPIFixtureRepository type
type FootballAPIFixtureRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, fixture, data
func (_m *FootballAPIFixtureRepository) Create(ctx context.Context, fixture repository.FootballApiFixture, data repository.Data) (*repository.FootballApiFixture, error) {
	ret := _m.Called(ctx, fixture, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *repository.FootballApiFixture
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.FootballApiFixture, repository.Data) (*repository.FootballApiFixture, error)); ok {
		return rf(ctx, fixture, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.FootballApiFixture, repository.Data) *repository.FootballApiFixture); ok {
		r0 = rf(ctx, fixture, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.FootballApiFixture)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.FootballApiFixture, repository.Data) error); ok {
		r1 = rf(ctx, fixture, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *FootballAPIFixtureRepository) Update(ctx context.Context, id uint, data repository.Data) (*repository.FootballApiFixture, error) {
	ret := _m.Called(ctx, id, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *repository.FootballApiFixture
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, repository.Data) (*repository.FootballApiFixture, error)); ok {
		return rf(ctx, id, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, repository.Data) *repository.FootballApiFixture); ok {
		r0 = rf(ctx, id, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.FootballApiFixture)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, repository.Data) error); ok {
		r1 = rf(ctx, id, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFootballAPIFixtureRepository creates a new instance of FootballAPIFixtureRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFootballAPIFixtureRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FootballAPIFixtureRepository {
	mock := &FootballAPIFixtureRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
